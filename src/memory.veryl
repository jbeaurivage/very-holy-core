/// Memory instantaniating a Block RAM
/// Byte addressed, but only supports
/// word-aligned reads and writes.
/// Misaligned requests will be silently ignored
module Memory #(
    param mem_init: string = "",
    /// Number of words
    param RAM_DEPTH: u32 = 1024,
) (
    clk  : input clock,
    rst_n: input reset,
    /// Port enable
    enable: input bool,
    /// Memory is word-addressed. Use byte_enable to write individual bytes
    address   : input logic<32>,
    write_data: input logic<32>,
    /// Byte enable mask, for writing individual bytes from a word
    byte_write_enable: input logic<4>,

    read_data: output logic<32>,
) {
    // Take the word-aligned part of the address
    /* verilator lint_off WIDTHTRUNC */
    let aligned_address: logic<30> = (address >> 2);
    /* verilator lint_on WIDTHTRUNC */
    // Inhibit misaligned requests
    let allow          : bool      = enable && address[1:0] == 0;

    inst ram: sp_bram #(
        INIT_FILE: mem_init,
        RAM_DEPTH          ,
    ) (
        clk    ,
        rst_n  ,
        enable: allow  ,
        /* verilator lint_off WIDTHTRUNC */
        address: aligned_address,
        /* verilator lint_on WIDTHTRUNC */
        write_data         ,
        byte_write_enable  ,

        read_data  ,
    );
}

#[test(test_memory, Memory)]
include (cocotb, "tb/memory.py");
