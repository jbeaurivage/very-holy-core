module Regfile (
    // Basics
    clk  : input clock,
    rst_n: input reset,

    // Reads
    address1  : input  logic<5> ,
    address2  : input  logic<5> ,
    read_data1: output logic<32>,
    read_data2: output logic<32>,

    // Writes
    write_enable: input bool     ,
    write_data  : input logic<32>,
    address3    : input logic<5> ,
) {
    var registers: logic<32> [32];

    // Async read logic
    assign read_data1 = registers[address1];
    assign read_data2 = registers[address2];

    // Write logic
    always_ff {
        // Init regs to 0 at reset
        if_reset {
            for i: u8 in 0..32 {
                registers[i[4:0]] = 32'b0;
            }
        } else {
            // Write, except on 0, reserved for a zero const according to RISC-V spec
            if write_enable && address3 != 0 {
                registers[address3] = write_data;
            }
        }
    }
}

#[test(test_regfile, Regfile)]
include (cocotb, "tb/regfile.py");
