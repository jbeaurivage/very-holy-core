

/// General-purpose digital output driver
module Gpo #(
    param NUM_PINS: u16 = 8,
) (
    clk  : input clock,
    rst_n: input reset,

    bus: modport MemoryBus::slave,

    gpo_out: output logic<NUM_PINS>,
) {
    enum GpoRegister: logic<2> {
        out = 0,
        clear = 1,
        set = 2,
    }

    var write_enable: bool    ;
    var write_data  : logic<8>;
    var register    : logic<2>;

    let enable: bool = bus.enable && bus.address <: GpoRegion::SIZE;

    always_comb {
        /* verilator lint_off WIDTHTRUNC */
        case bus.byte_write_enable {
            4'b001: {
                register     = 0;
                write_data   = bus.write_data & 32'hff;
                write_enable = enable;
            }
            4'b010: {
                register     = 1;
                write_data   = bus.write_data >> 8 & 32'hff;
                write_enable = enable;
            }
            4'b100: {
                register     = 2;
                write_data   = bus.write_data >> 16 & 32'hff;
                write_enable = enable;
            }
            default: {
                register     = 0;
                write_data   = 0;
                write_enable = false;
            }
        }
        /* verilator lint_on WIDTHTRUNC */
    }

    var out: logic<NUM_PINS>;

    let set_value: logic<NUM_PINS> = case register {
        GpoRegister::out  : write_data,
        GpoRegister::clear: out & ~write_data,
        GpoRegister::set  : out | write_data,
        default           : out,
    };

    always_ff {
        if_reset {
            out = 0;
        } else {
            if write_enable {
                out = set_value;
            }
        }
    }

    assign gpo_out       = out;
    assign bus.read_data = {8'b0, gpo_out repeat 3};
}
