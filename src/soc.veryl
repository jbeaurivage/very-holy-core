module Soc::<ROM: MemRegion, RAM: MemRegion, PERIPH: MemRegion> #(
    param CLOCK_FREQ: u32 = 50_000_000,
) (
    clk  : input clock,
    rst_n: input reset,

    led   : output logic<7>,
    usb_rx: input  logic   ,
    usb_tx: output logic   ,
) {

    always_ff {
        if_reset {
            usb_tx = 0;
        }
    }

    inst cpu: Cpu (
        clk    ,
        rst_n  ,

        imem_addr    ,
        instruction  ,

        dmem_addr               ,
        dmem_read_data          ,
        dmem_write_data         ,
        dmem_byte_write_enable  ,
    );

    const COL_WIDTH: u8 = 8;
    const NUM_COL  : u8 = 4;


    // Port A is for instruction memory
    inst rom_port_a: MemoryBus #( ADDR_WIDTH: 32, NUM_COL, COL_WIDTH );

    // Port B is to allow reads to imem from RAM
    // using regular data memory instructions
    inst rom_port_b: MemoryBus #( ADDR_WIDTH: 32, NUM_COL, COL_WIDTH );

    inst ram_port: MemoryBus #( ADDR_WIDTH: 32, NUM_COL, COL_WIDTH );

    inst periph_port: MemoryBus #( ADDR_WIDTH: 32, NUM_COL, COL_WIDTH );

    // The fetched instruction we will decode and execute.
    var instruction: logic<32>;
    var imem_addr  : logic<32>;

    // Instruction memory. Acts as a ROM.
    inst rom: DualPortBlockRam #(
        INIT_FILE : ROM::INIT_FILE ,
        NUM_COL                    ,
        COL_WIDTH                  ,
        RAM_DEPTH : ROM::SIZE / 4  ,
        ADDR_WIDTH: ROM::ADDR_WIDTH,
    ) (
        clk  ,

        port_a: rom_port_a,
        port_b: rom_port_b,
    );

    var dmem_addr             : logic<32>;
    var dmem_write_data       : logic<32>;
    var dmem_byte_write_enable: logic<4> ;
    var dmem_read_data        : logic<32>;

    // Data memory. Acts as a RAM.
    inst ram: SinglePortBlockRam #(
        INIT_FILE : RAM::INIT_FILE ,
        NUM_COL                    ,
        COL_WIDTH                  ,
        RAM_DEPTH : RAM::SIZE / 4  ,
        ADDR_WIDTH: RAM::ADDR_WIDTH,
    ) (
        clk    ,
        rst_n  ,

        port: ram_port,
    );

    inst mem_controller: MemoryController::<ROM, RAM, PERIPH> (
        clk                                          ,
        rst_n                                        ,
        rom_address          : imem_addr             ,
        rom_read_data        : instruction           ,
        ram_address          : dmem_addr             ,
        ram_write_data       : dmem_write_data       ,
        ram_byte_write_enable: dmem_byte_write_enable,
        ram_read_data        : dmem_read_data        ,
        ram_error            : _                     ,
        rom_port_a                                   ,
        rom_port_b                                   ,
        ram_port                                     ,
        periph_port                                  ,
    );

    inst periph_mux: PeripheralMux (
        clk,
        rst: rst_n,

        master: periph_port,

        gpo_bus : gpo_port ,
        uart_bus: uart_port,
    );

    var gpo_out: logic<8>;

    inst gpo_port: MemoryBus #( ADDR_WIDTH: 32, NUM_COL, COL_WIDTH );
    inst gpo: Gpo #(
        NUM_PINS: 8,
    ) (
        clk    ,
        rst_n  ,

        bus: gpo_port,

        gpo_out  ,
    );

    /* verilator lint_off WIDTHTRUNC */
    assign led = gpo_out;
    /* verilator lint_on WIDTHTRUNC */

    inst uart_port: MemoryBus #( ADDR_WIDTH: 32, NUM_COL, COL_WIDTH );
}
